{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer, useRef } from 'react'; // import JobData from \"./data.json\";\n\nimport axios from 'axios';\n\nfunction jobAPIReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\n;\nexport function useJobList(initialFilter) {\n  _s();\n\n  const didMountRef = useRef(true);\n  const url = 'https://localhost:5001/api/jobs'; //const data = JobData\n\n  const [filter, setFilter] = useState(null);\n  const [state, dispatch] = useReducer(jobAPIReducer, {\n    isLoading: false,\n    isError: false,\n    data: null\n  });\n  useEffect(() => {\n    async function getJobs() {\n      dispatch({\n        type: \"FETCH_INIT\"\n      });\n      const response = await axios.get(url);\n      dispatch({\n        type: \"FETCH_SUCCESS\",\n        payload: response.data\n      });\n    }\n\n    if (didMountRef.current) {\n      getJobs();\n    }\n  }, [filter]);\n  return [state, setFilter];\n} //   useEffect(() => {\n//     function sleep(ms) {\n//       return new Promise(resolve => setTimeout(resolve, ms));\n//     }\n//     async function getJobs() {\n//       dispatch({type: \"FETCH_INIT\"});\n//       await sleep(600);\n//       dispatch({type: \"FETCH_SUCCESS\", payload: data});\n//     }\n//     if (didMountRef.current) {\n//       getJobs();\n//     }\n//   }, [filter]);\n//   return [state, setFilter];\n// }\n\n_s(useJobList, \"Jbeb2LsVVLGj6QFnFfCZ0xhBHdU=\");","map":{"version":3,"sources":["/Users/yulu/Heytour-joblist/UI/src/joblist/JobListAPI.js"],"names":["useState","useEffect","useReducer","useRef","axios","jobAPIReducer","state","action","type","isLoading","isError","data","payload","Error","useJobList","initialFilter","didMountRef","url","filter","setFilter","dispatch","getJobs","response","get","current"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,eAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAJR,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF;AACE,YAAM,IAAIG,KAAJ,EAAN;AAtBJ;AAwBD;;AAAA;AAGD,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAmC;AAAA;;AACxC,QAAMC,WAAW,GAAGb,MAAM,CAAC,IAAD,CAA1B;AACA,QAAMc,GAAG,GAAE,iCAAX,CAFwC,CAIxC;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAM,CAACM,KAAD,EAAQc,QAAR,IAAoBlB,UAAU,CAACG,aAAD,EAAgB;AAClDI,IAAAA,SAAS,EAAE,KADuC;AAElDC,IAAAA,OAAO,EAAE,KAFyC;AAGlDC,IAAAA,IAAI,EAAE;AAH4C,GAAhB,CAApC;AAOAV,EAAAA,SAAS,CAAC,MAAM;AAEd,mBAAeoB,OAAf,GAAwB;AACtBD,MAAAA,QAAQ,CAAC;AAACZ,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACA,YAAMc,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,GAAV,CAAvB;AACAG,MAAAA,QAAQ,CAAC;AAACZ,QAAAA,IAAI,EAAE,eAAP;AAAwBI,QAAAA,OAAO,EAAEU,QAAQ,CAACX;AAA1C,OAAD,CAAR;AAED;;AAED,QAAIK,WAAW,CAACQ,OAAhB,EAAyB;AACvBH,MAAAA,OAAO;AACR;AAEF,GAbQ,EAaN,CAACH,MAAD,CAbM,CAAT;AAeA,SAAO,CAACZ,KAAD,EAAQa,SAAR,CAAP;AAED,C,CAED;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;GApDgBL,U","sourcesContent":["import { useState, useEffect, useReducer, useRef } from 'react';\n// import JobData from \"./data.json\";\nimport axios from 'axios';\n\nfunction jobAPIReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\n\nexport function useJobList(initialFilter) {\n  const didMountRef = useRef(true);\n  const url ='https://localhost:5001/api/jobs'\n\n  //const data = JobData\n  const [filter, setFilter] = useState(null);\n\n  const [state, dispatch] = useReducer(jobAPIReducer, {\n    isLoading: false,\n    isError: false,\n    data: null\n  });\n\n  \n  useEffect(() => {\n\n    async function getJobs(){\n      dispatch({type: \"FETCH_INIT\"});\n      const response = await axios.get(url);\n      dispatch({type: \"FETCH_SUCCESS\", payload: response.data});\n\n    }\n\n    if (didMountRef.current) {\n      getJobs();\n    }\n    \n  }, [filter]);\n\n  return [state, setFilter];   \n\n}\n\n//   useEffect(() => {\n\n//     function sleep(ms) {\n//       return new Promise(resolve => setTimeout(resolve, ms));\n//     }\n\n//     async function getJobs() {\n//       dispatch({type: \"FETCH_INIT\"});\n//       await sleep(600);\n//       dispatch({type: \"FETCH_SUCCESS\", payload: data});\n\n//     }\n\n//     if (didMountRef.current) {\n//       getJobs();\n//     }\n//   }, [filter]);\n\n//   return [state, setFilter];\n// }"]},"metadata":{},"sourceType":"module"}