{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer, useRef } from 'react';\n\nfunction authAPIReducer(state, action) {\n  switch (action.type) {\n    case 'AUTH_INIT':\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case 'AUTH_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'AUTH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\n;\nexport function useLogin(initialUser) {\n  _s();\n\n  const didMountRef = useRef(false);\n  const mockData = {\n    user: \"alan@gmail.com\",\n    password: \"123456\"\n  };\n  const mockJsonRes = '{\"firstName\": \"Alan\", \"lastName\": \"Wang\", \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"}';\n  const data = JSON.parse(mockJsonRes);\n  const [user, setUser] = useState(null);\n  const [state, dispatch] = useReducer(authAPIReducer, {\n    isLoading: false,\n    isError: false,\n    data: null\n  });\n  useEffect(() => {\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async function authenticate() {\n      dispatch({\n        type: \"AUTH_INIT\"\n      });\n      await sleep(600);\n\n      if (user.password === mockData.password) {\n        dispatch({\n          type: \"AUTH_SUCCESS\",\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: \"AUTH_FAILURE\"\n        });\n      }\n    }\n\n    if (didMountRef.current) {\n      authenticate();\n    } else {\n      didMountRef.current = true;\n    }\n  }, [user]);\n  return [state, setUser];\n}\n\n_s(useLogin, \"rC7fzhDp6gZW50RSjCKIFuIgpw8=\");","map":{"version":3,"sources":["/Users/yulu/Heytour-joblist/UI/src/authentication/AuthAPI.js"],"names":["useState","useEffect","useReducer","useRef","authAPIReducer","state","action","type","isLoading","isError","data","payload","Error","useLogin","initialUser","didMountRef","mockData","user","password","mockJsonRes","JSON","parse","setUser","dispatch","sleep","ms","Promise","resolve","setTimeout","authenticate","current"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,SAAS,EAAE,IAFR;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHG,QAAAA,SAAS,EAAE,KAFR;AAGHC,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAJV,OAAP;;AAMJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGN,KADA;AAEHG,QAAAA,SAAS,EAAE,KAFR;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ;AACA,YAAM,IAAIG,KAAJ,EAAN;AAtBJ;AAwBH;;AAAA;AAED,OAAO,SAASC,QAAT,CAAkBC,WAAlB,EAA+B;AAAA;;AAClC,QAAMC,WAAW,GAAGZ,MAAM,CAAC,KAAD,CAA1B;AAEA,QAAMa,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAAE,gBADO;AAEbC,IAAAA,QAAQ,EAAE;AAFG,GAAjB;AAKA,QAAMC,WAAW,GAAG,iNAApB;AAEA,QAAMT,IAAI,GAAGU,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAb;AAEA,QAAM,CAACF,IAAD,EAAOK,OAAP,IAAkBtB,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACK,KAAD,EAAQkB,QAAR,IAAoBrB,UAAU,CAACE,cAAD,EAAiB;AACjDI,IAAAA,SAAS,EAAE,KADsC;AAEjDC,IAAAA,OAAO,EAAE,KAFwC;AAGjDC,IAAAA,IAAI,EAAE;AAH2C,GAAjB,CAApC;AAMET,EAAAA,SAAS,CAAC,MAAM;AAEd,aAASuB,KAAT,CAAeC,EAAf,EAAmB;AACjB,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;;AAED,mBAAeI,YAAf,GAA8B;AAC5BN,MAAAA,QAAQ,CAAC;AAAChB,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACA,YAAMiB,KAAK,CAAC,GAAD,CAAX;;AAEA,UAAIP,IAAI,CAACC,QAAL,KAAkBF,QAAQ,CAACE,QAA/B,EAAyC;AACvCK,QAAAA,QAAQ,CAAC;AAAChB,UAAAA,IAAI,EAAE,cAAP;AAAuBI,UAAAA,OAAO,EAAED;AAAhC,SAAD,CAAR;AACD,OAFD,MAEO;AACLa,QAAAA,QAAQ,CAAC;AAAChB,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAR;AACD;AACF;;AAED,QAAIQ,WAAW,CAACe,OAAhB,EAAyB;AACvBD,MAAAA,YAAY;AACb,KAFD,MAGK;AACHd,MAAAA,WAAW,CAACe,OAAZ,GAAsB,IAAtB;AACD;AACF,GAvBQ,EAuBN,CAACb,IAAD,CAvBM,CAAT;AAyBA,SAAO,CAACZ,KAAD,EAAQiB,OAAR,CAAP;AAEL;;GA9CeT,Q","sourcesContent":["import { useState, useEffect, useReducer, useRef } from 'react';\n\nfunction authAPIReducer(state, action) {\n    switch (action.type) {\n        case 'AUTH_INIT':\n            return {\n                ...state,\n                isLoading: true,\n                isError: false\n            };\n        case 'AUTH_SUCCESS':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.payload,\n            };\n        case 'AUTH_FAILURE':\n            return {\n                ...state,\n                isLoading: false,\n                isError: true\n            };\n\n        default:\n        throw new Error();\n    }\n};\n\nexport function useLogin(initialUser) {\n    const didMountRef = useRef(false);\n\n    const mockData = {\n        user: \"alan@gmail.com\",\n        password: \"123456\"\n      };\n    \n    const mockJsonRes = '{\"firstName\": \"Alan\", \"lastName\": \"Wang\", \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"}';\n    \n    const data = JSON.parse(mockJsonRes);\n\n    const [user, setUser] = useState(null);\n    const [state, dispatch] = useReducer(authAPIReducer, {\n        isLoading: false,\n        isError: false,\n        data: null\n      });\n\n      useEffect(() => {\n\n        function sleep(ms) {\n          return new Promise(resolve => setTimeout(resolve, ms));\n        }\n    \n        async function authenticate() {\n          dispatch({type: \"AUTH_INIT\"});\n          await sleep(600);\n    \n          if (user.password === mockData.password) {\n            dispatch({type: \"AUTH_SUCCESS\", payload: data});\n          } else {\n            dispatch({type: \"AUTH_FAILURE\"});\n          }\n        }\n    \n        if (didMountRef.current) {\n          authenticate();\n        }\n        else {\n          didMountRef.current = true;\n        }\n      }, [user]);\n    \n      return [state, setUser];\n\n}"]},"metadata":{},"sourceType":"module"}