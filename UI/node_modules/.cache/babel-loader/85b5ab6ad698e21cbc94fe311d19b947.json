{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer, useRef } from 'react';\nimport JobData from \"./data.json\";\n\nfunction jobAPIReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\n;\nexport function useJobList(initialFilter) {\n  _s();\n\n  const didMountRef = useRef(true);\n  const data = JobData;\n  const [filter, setFilter] = useState(null);\n  const [state, dispatch] = useReducer(jobAPIReducer, {\n    isLoading: false,\n    isError: false,\n    data: null\n  });\n  useEffect(() => {\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async function getJobs() {\n      dispatch({\n        type: \"FETCH_INIT\"\n      });\n      await sleep(600);\n      dispatch({\n        type: \"FETCH_SUCCESS\",\n        payload: data\n      });\n    }\n\n    if (didMountRef.current) {\n      getJobs();\n    }\n  }, [filter]);\n  return [state, setFilter];\n}\n\n_s(useJobList, \"Jbeb2LsVVLGj6QFnFfCZ0xhBHdU=\");","map":{"version":3,"sources":["/Users/yulu/Heytour-joblist/src/joblist/JobListAPI.js"],"names":["useState","useEffect","useReducer","useRef","JobData","jobAPIReducer","state","action","type","isLoading","isError","data","payload","Error","useJobList","initialFilter","didMountRef","filter","setFilter","dispatch","sleep","ms","Promise","resolve","setTimeout","getJobs","current"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,eAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAJR,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF;AACE,YAAM,IAAIG,KAAJ,EAAN;AAtBJ;AAwBD;;AAAA;AAED,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAmC;AAAA;;AACxC,QAAMC,WAAW,GAAGb,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAMQ,IAAI,GAAGP,OAAb;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAM,CAACM,KAAD,EAAQa,QAAR,IAAoBjB,UAAU,CAACG,aAAD,EAAgB;AAClDI,IAAAA,SAAS,EAAE,KADuC;AAElDC,IAAAA,OAAO,EAAE,KAFyC;AAGlDC,IAAAA,IAAI,EAAE;AAH4C,GAAhB,CAApC;AAMAV,EAAAA,SAAS,CAAC,MAAM;AAEd,aAASmB,KAAT,CAAeC,EAAf,EAAmB;AACjB,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;;AAED,mBAAeI,OAAf,GAAyB;AACvBN,MAAAA,QAAQ,CAAC;AAACX,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACA,YAAMY,KAAK,CAAC,GAAD,CAAX;AACAD,MAAAA,QAAQ,CAAC;AAACX,QAAAA,IAAI,EAAE,eAAP;AAAwBI,QAAAA,OAAO,EAAED;AAAjC,OAAD,CAAR;AAED;;AAED,QAAIK,WAAW,CAACU,OAAhB,EAAyB;AACvBD,MAAAA,OAAO;AACR;AACF,GAhBQ,EAgBN,CAACR,MAAD,CAhBM,CAAT;AAkBA,SAAO,CAACX,KAAD,EAAQY,SAAR,CAAP;AACD;;GA/BeJ,U","sourcesContent":["import { useState, useEffect, useReducer, useRef } from 'react';\nimport JobData from \"./data.json\";\n\nfunction jobAPIReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport function useJobList(initialFilter) {\n  const didMountRef = useRef(true);\n\n  const data = JobData\n  const [filter, setFilter] = useState(null);\n\n  const [state, dispatch] = useReducer(jobAPIReducer, {\n    isLoading: false,\n    isError: false,\n    data: null\n  });\n\n  useEffect(() => {\n\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async function getJobs() {\n      dispatch({type: \"FETCH_INIT\"});\n      await sleep(600);\n      dispatch({type: \"FETCH_SUCCESS\", payload: data});\n\n    }\n\n    if (didMountRef.current) {\n      getJobs();\n    }\n  }, [filter]);\n\n  return [state, setFilter];\n}"]},"metadata":{},"sourceType":"module"}